{"componentChunkName":"component---src-templates-blog-post-details-js","path":"/blog/exciting-new-features-in-javascript/","result":{"data":{"markdownRemark":{"id":"b2c9c7af-af71-51b1-85ca-99830e43247d","frontmatter":{"author":"Dipto Paul","date":"August 07, 2019","slug":null,"tags":["javascript"],"title":"Exciting New Features In Javascript"},"timeToRead":3,"html":"<p>Javascript community is going very well with the TC39 (Technical Committee 39), and it's proposal system. And javascript is now evolving fast, and we can expect some amazing features. I will talk about some of the most useful and exciting features which will make our life easy.</p>\n<h2>1. Optional Chaining ?</h2>\n<p>I'm sure you faced an error like this.</p>\n<p><code>cannot read property 'amazing' of undefined.</code></p>\n<p>and these errors are pervasive when accessing dynamic object with deep nesting, we can combat this in javascript by using the <code>&#x26;&#x26;</code> operator to check, but it can get quite messy sometimes, here's the old and new way</p>\n<pre><code class=\"language-js\">const js = {\r\n  can: {\r\n    do: \"anything\",\r\n    will: \"do anything\",\r\n  },\r\n};\r\n\r\n// old way\r\nconst canDoAnything = js &#x26;&#x26; js.can &#x26;&#x26; js.can.do;\r\n\r\n// new way\r\nconst canDoAnythingNew = js?.can?.do;\n</code></pre>\n<h2>3. Private fields <em>#</em></h2>\n<blockquote>\n<p>Partially Available in Chrome &#x26; NodeJS 12</p>\n</blockquote>\n<p>Finally, we can avoid _underscore naming conventions and use actual private variables in classes. Yes, the syntax is a bit weird and controversial at first, but hey, first time for everything! the new version of chrome supports class <code>#fields</code> only, but the class <code>#methods()</code> is coming soon</p>\n<blockquote>\n<p>Check the <a href=\"https://github.com/tc39/proposal-class-fields\">TC39 proposal for class fields</a></p>\n</blockquote>\n<blockquote>\n<p>Check the <a href=\"https://github.com/tc39/proposal-private-methods\">TC39 proposal for private methods</a></p>\n</blockquote>\n<p>here's how it looks</p>\n<pre><code class=\"language-js\">// private fields must start with '#'\r\n// and they arent accessible outside the class block\r\n\r\nclass Ship {\r\n  #x;\r\n  #y;\r\n\r\n  constructor(x, y) {\r\n    this.#x = x;\r\n    this.#y = y;\r\n  }\r\n\r\n  // private methods are comming soon\r\n  #boost() {\r\n    this.#x++;\r\n    this.#y++;\r\n  }\r\n}\r\n\r\nconst ship = new Ship(1, 1);\r\nconsole.log(ship.#x); // -> Error\n</code></pre>\n<h2>4. Top Level await</h2>\n<p>This one is interesting because <code>top level await</code> allows you to use \"await\" without an outer async function, which means you don't have to wrap an anonymous async function for every async operation.</p>\n<p>\"Top Level await' is very handy while debugging async stuff (like fetch) in console without wrapping it in an async function.</p>\n<blockquote>\n<p>Check the <a href=\"https://github.com/tc39/proposal-top-level-await\">TC39 proposal for Top Level Await</a></p>\n</blockquote>\n<p>and there are many <a href=\"https://github.com/tc39/proposal-top-level-await#use-cases\">use cases</a> which are mentioned in the tc39 repo</p>\n<pre><code class=\"language-js\">// top level window\r\nawait fetch(\"https://somesite.com/api/data\"); // -> Response {..}\n</code></pre>\n<h2>5. BigInt</h2>\n<blockquote>\n<p>Available in Chrome &#x26; NodeJS 12</p>\n</blockquote>\n<p>Javascript always has been tribble at Math because we cannot reliably store numbers larger than 2 ^ 53, which limits its capabilities in many regions, for example, graphics and data processing.</p>\n<blockquote>\n<p>Check the <a href=\"https://github.com/tc39/proposal-bigint\">TC39 proposal for BigInt</a></p>\n</blockquote>\n<p>here's how the syntax looks</p>\n<pre><code class=\"language-js\">// can define BigInt by appending 'n' to a number literal\r\nconst theBiggestInt = 9997199254748991n;\r\n\r\n// using the constructor with a literal\r\nconst alsoHuge = BigInt(9997199254748991n);\r\n\r\n// or with a string\r\nconst hugeButString = BigInt(\"9997199254748991n\");\n</code></pre>\n<p>You can also do the same <code>+, -, /, *, %</code> operations on BigInt as you would expect from regular numbers, but you can't mix BigInt with numbers in most operations. Comparing Number and BigInt works, but not adding them.</p>\n<h2>6. globalThis</h2>\n<p>I know this one might not be too much exciting for you, but trust me <code>globalThis</code> is essential for standardizing the <code>global object</code> in javascript.</p>\n<p>let's say we need to get the <code>globalObject</code> for browser, node, all other alien stuff.</p>\n<blockquote>\n<p>Check the <a href=\"https://github.com/tc39/proposal-global\">TC39 proposal for globalThis</a></p>\n</blockquote>\n<p>Before <code>globalThis</code>, the only reliable cross-platform way to get the global object for an environment was <code>Function('return this')()</code>. However, this causes CSP violations in some settings, so es6-shim uses a check like this, for example:</p>\n<pre><code class=\"language-js\">var getGlobal = function () {\r\n  // in node, it's named 'global'. If we're in a shell, 'this' might work.\r\n  // some times also self. and in browsers its window\r\n  if (typeof self !== \"undefined\") {\r\n    return self;\r\n  }\r\n  if (typeof window !== \"undefined\") {\r\n    return window;\r\n  }\r\n  if (typeof global !== \"undefined\") {\r\n    return global;\r\n  }\r\n  throw new Error(\"unable to locate global object\");\r\n};\n</code></pre>\n<p>Now, this can get quite messy because we have to check for every environment and find the actual <code>global</code>. You might think that its not a big issue, but it is a massive issue because the problem here is about standardization.</p>\n<p>And for that reason, <code>globalThis</code> is introduced. the new syntax will look like this</p>\n<pre><code class=\"language-js\">// taken from mdn\r\nfunction canMakeHTTPRequest() {\r\n  return typeof globalThis.XMLHttpRequest === \"function\";\r\n}\r\n\r\nconsole.log(canMakeHTTPRequest());\r\n// expected output (in a browser): true\n</code></pre>\n<hr>\n<p>That's all, folks!</p>\n<p>Now, some of them are supported in the latest browsers and nodejs 12, but some of them are <code>stage 3</code>, so maybe we can see some changes.</p>\n<p>if you have any questions or if I missed some cool features, comment down below. &#x3C;3</p>","tableOfContents":"<ul>\n<li><a href=\"#1-optional-chaining-\">1. Optional Chaining ?</a></li>\n<li><a href=\"#3-private-fields-\">3. Private fields <em>#</em></a></li>\n<li><a href=\"#4-top-level-await\">4. Top Level await</a></li>\n<li><a href=\"#5-bigint\">5. BigInt</a></li>\n<li><a href=\"#6-globalthis\">6. globalThis</a></li>\n</ul>"}},"pageContext":{"qString":"b2c9c7af-af71-51b1-85ca-99830e43247d"}},"staticQueryHashes":["3509330943"],"slicesMap":{}}